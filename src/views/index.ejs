<!DOCTYPE html>
<html>
<head>
<title>Globomantics</title>
 <meta charset="utf-8">
 <meta http-equiv="X-UA-Compatible" content="IE=edge">
 <meta name="viewport" content="width=device-width, initial-scale=1">
 <link href="css/bootstrap.min.css" rel="stylesheet">
 <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.0/css/all.css"/>
 <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
 <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
 <link href="css/style-home.css" rel="stylesheet">
<link rel="shortcut icon" type="image/x-icon" href="images/G.png"/>

<style>
  body {
      font-family: Arial, sans-serif;
      padding: 20px;
      margin: 0;
  }
  .container {
      margin-bottom: 20px;
  }
/* Main container to align left and right sections */


.main-container {
    padding: 10px;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 20px;
}
.left-section {
    flex: 1;
}
.right-section {
    flex: 1;
}
    

  .filteredList {
    max-height: 150px; 
  }
  .item-list {
      list-style-type: none;
      padding: 0;
      margin: 0;
      overflow-y: auto;
      border: 1px solid #ddd;
      border-radius: 4px;
  }
  .item-list li {
      padding: 5px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #eee;
  }
  .item-list li:last-child {
      border-bottom: none;
  }
  .added-list {
      margin-top: 20px;
  }

  .name-container {
    flex: 2;
    text-align: left;
}
.add-remove-button {
    flex: 0.5;
    margin-left: 10px;
    padding: 0px;
    background-color: #ccc;
    border-radius: 5px;
}
.reset-button {
    padding: 5px;
    margin-bottom: 5px;
    background-color: #ccc;
    border-radius: 5px;
}
.points-container {
    flex: 1;
    text-align: center;
}

input[type="text"] {
    padding: 7px;
    border: 1px solid #ccc;
    border-radius: 5px;
    margin: 5px;
}

.image-section {
    position: relative;
    background-image: url('images/hero image.png'); /* Replace with your image URL */
    background-size: cover;
    background-position: center;
    background-attachment: fixed; /* Fixes the background while text scrolls */
    padding: 20px;
    min-height: 100vh;
    color: #eee;
}
</style>
</head>

<body>
<!--
<div id="wrapper">

	<header>
	    <div class="container">
		    <div class="logo col-md-5 col-sm-5 col-xs-8">
                <a href="index.html"><img src="images/Globo-Logo-white.svg" alt="logo"/></a><span class="text">MANIACALLY TAKING TECH TO THE GLOBE</span>
			</div>
			<div class="mobile-togle col-md-12 col-sm-12 col-xs-12">
        <nav class="navbar navbar-default" role="navigation">
  <div class="navbar-header">
  <button type="button" id="hamburger" class="navbar-toggle x collapsed" data-toggle="collapse" data-target="#navbar-collapse-x">
  <span class="icon-bar"></span>
  <span class="icon-bar"></span>
  <span class="icon-bar"></span>
  </button>
  <a class="navbar-brand" href="#top"></a>
  </div>

  <div class="collapse navbar-collapse" id="navbar-collapse-x">
  <ul class="nav navbar-nav navbar-right">
  <li><div class="search1">
  			      <button type="submit"><i class="fa fa-search"></i></button> <input type="text" class="form-control" placeholder="Search">
  				</div></li>
  <ul class="navbar-nav mr-auto">
  <li class="nav-item">
          <a class="nav-link" href="our-story.html">Our story<span class="sr-only">(current)</span></a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="sessions">Sessions</a>
        </li>

        <li class="nav-item">
          <a class="nav-link disabled" href="robotics.html">Robotics</a>
        </li>

  	  <li class="nav-item">
          <a class="nav-link disabled" href="media.html">Media</a>
        </li>
  	  <li class="nav-item">
          <a class="nav-link disabled" href="#">Support</a>
        </li>
  	  </ul>
  </ul>
  </div>
  </nav>
  			</div>

  			<div class="right_section col-md-5 col-xs-12">
  			<div class="search">
  			      <button type="submit"><i class="fa fa-search"></i></button> <input type="text" class="form-control" placeholder="Search">
  				</div>


  		<nav class="navbar navbar-expand-lg navbar-light bg-light">



    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav mr-auto">
        <li class="nav-item active">
          <a class="nav-link" href="our-story.html">Our story<span class="sr-only">(current)</span></a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="sessions">Sessions</a>
        </li>

        <li class="nav-item">
          <a class="nav-link disabled" href="robotics.html">Robotics</a>
        </li>

  	  <li class="nav-item">
          <a class="nav-link disabled" href="media.html">Media</a>
        </li>
  	  <li class="nav-item">
          <a class="nav-link disabled" href="#">Support</a>
        </li>

      </ul>

    </div>

     </nav>
     </div>

     <div class="sign-in col-md-2">
     <span class="dvider"></span>
     <div class="sign">
     <a hrf="#"><img class="sign-in-img" src="images/avatar.svg" alt="sign-in">
    Sign-in</a>

     </div>

     </div>

  		</div>
  	</header>




</div>
-->

  <div class="image-section">
        <h1>FANTASY FOOTBALL<br> <span>POINTS FOR EACH PLAYER</span>.</h1>
        <p>v0.1</p>      
	<!-- <div class="container jumboContainer"> -->

<!-- WARNING: the manager names below need to match the manager names that the database is instantiated with below -->
    <%
    managers = ["Emma", "David"];
    managers.map(manager=>{
      %>
      


    <div class="main-container">

      <div class="left-section">
        <div class="added-list">
          <h3><%=manager%></h3>
          <button class="reset-button" type="button" onclick="reset('<%=manager%>')">Reset to default team</button>
          <ul id="addedItemsList-<%=manager%>" class="item-list"></ul>
        </div>
      </div>
    
      <div class="right-section">
        <div class="container">
          <input type="text" id="searchBar-<%=manager%>" style="color: black" placeholder="Search..." oninput="filterList('<%=manager%>')">
        </div>
        <ul id="filteredList-<%=manager%>" class="item-list filteredList"></ul>
      </div>

    </div> 
  
  <%
  })
  %>



  
  <!-- </div> -->
  </div>


<script>

  // // start: IndexedDB functions

  // manager_data = [
  //   {
  //   "manager_key": 0,
  //   "player_indices": [
  //   202641,
  //   97032,
  //   491279
  //   ]
  //   },
  //   {
  //   "manager_key": 1,
  //   "player_indices": [
  //   232917,
  //   477424,
  //   78916
  //   ]
  //   }
  // ]

// WARNING: the manager names below need to match the manager names that html is created with above
manager_data = [
  {
    "single_id": 0,
    "data": {
      "Emma": [
      232917,
      477424,
      78916
      ],
      "David": [
      202641,
      97032,
      491279
      ]
    }
  }
]

function squad_id_to_name(squad_id) {
  dict = {
    43: "Man City",
    14: "Liverpool",
    7: "Aston Villa",
    3: "Arsenal",
    8: "Chelsea",
    4: "Newcastle",
    36: "Brighton",
    17: "Nottm Forest",
    54: "Fulham",
    6: "Tottenham",
    1: "Man United",
    94: "Brentford",
    91: "Bournemouth",
    21: "West Ham",
    13: "Leicester City",
    31: "Crystal Palace",
    40: "Ipswich Town",
    20: "Southampton",
    11: "Everton",
    39: "Wolves"
  }

  if (!(squad_id in dict)) {
    return "TEAM-NAME-NOT-FOUND"
  }
  
  return dict[squad_id]
}







  let db = null;
  dbNeedsCreating = false;

  function open_or_create_database() {

    return new Promise((resolve, reject) => {
      const request = indexedDB.open('MyTestDB');

      request.onerror = function (event) {
          console.log("Problem opening DB.");
      }

      request.onupgradeneeded = function (event) {
          db = event.target.result;

          if (!db.objectStoreNames.contains("managers")) {

            dbNeedsCreating = true;
            
            db.createObjectStore("managers", { keyPath: "single_id" });
            console.log("created managers objectStore")        
            console.log(`open_or_create_database. dbNeedsCreating = ${dbNeedsCreating}`);

          }

      }

      request.onsuccess = function (event) {
        db = event.target.result;
        console.log("DB OPENED.");
        resolve(true);

      }      
    })
    

}

function delete_database() {
  return new Promise((resolve, reject) => {

    const request = indexedDB.deleteDatabase('MyTestDB');

    request.onerror = function (event) {
        console.log("Problem deleting DB.");
    }

    request.onsuccess = function (event) {
        db = event.target.result;
        console.log("DB DELETED.");
        resolve(true);
    }

  })
}

function insert_records(records) {
    if (db) {
        const insert_transaction = db.transaction("managers", "readwrite");
        const objectStore = insert_transaction.objectStore("managers");

        return new Promise((resolve, reject) => {
            insert_transaction.oncomplete = function () {
                console.log("ALL INSERT TRANSACTIONS COMPLETE.");
                resolve(true);
            }

            insert_transaction.onerror = function () {
                console.log("PROBLEM INSERTING RECORDS.")
                resolve(false);
            }

            records.forEach(item => {
                let request = objectStore.add(item);

                request.onsuccess = function () {
                    console.log("Added: ", item);
                }
            });
        });
    }
    else {
        console.log("no db")
    }
}

function get_record(searchFor) {
    if (db) {
        const get_transaction = db.transaction("managers", "readonly");
        const objectStore = get_transaction.objectStore("managers");

        return new Promise((resolve, reject) => {
            get_transaction.oncomplete = function () {
            console.log("ALL GET TRANSACTIONS COMPLETE.");
            }

            get_transaction.onerror = function () {
            console.log("PROBLEM GETTING RECORDS.")
            }

            let request = objectStore.get(searchFor);

            request.onsuccess = function (event) {
            resolve(event.target.result);
            }
        });
    }
    else {
        console.log("no db")
    }
}

function update_record(record) {
    if (db) {
        const put_transaction = db.transaction("managers", "readwrite");
        const objectStore = put_transaction.objectStore("managers");

        return new Promise((resolve, reject) => {
            put_transaction.oncomplete = function () {
                console.log("ALL PUT TRANSACTIONS COMPLETE.");
                resolve(true);
            }

            put_transaction.onerror = function () {
                console.log("PROBLEM UPDATING RECORDS.")
                resolve(false);
            }

            objectStore.put(record);
        });
    }
}


// // end: IndexedDB functions

(async () => {
  // await delete_database();
  await open_or_create_database();
  console.log(`top level. dbNeedsCreating = ${dbNeedsCreating}`);
  if (dbNeedsCreating) {
    await insert_records(manager_data);
  }

  // res = await get_record(0);
  // console.log(`res = ${res}`)
  // console.log(`res.player_indices = ${res.player_indices}`)

  // List of added items
  res = await get_record(0);
  addedItems = res.data;

  // displayAddedItemsList("Emma");    
  // console.log("\n for (const manager in addedItems) ...");
  for (const manager in addedItems) {
    displayAddedItemsList(manager);    
    // console.log(manager);
  }


  // Initial display of the full list
  temp = await fetch('/filter', {
      method: 'POST',
      headers: {
      'Content-Type': 'application/json'
      },
      body: JSON.stringify({data: ""})
  })

  thing = await temp.json();

  // displayFilteredList("Emma", thing.data);
  for (const manager in addedItems) {
    displayFilteredList(manager, thing.data);
  }



})();




  

  // Function to display the list of filtered items
  function displayFilteredList(manager, items) {

    const filteredList = document.getElementById(`filteredList-${manager}`);
    filteredList.innerHTML = ""; // Clear the existing list
    items.forEach(item => {
        const li = document.createElement('li');

        // Create a container for the name
        const nameContainer = document.createElement('div');
        nameContainer.textContent = `${item.first_name} ${item.last_name}   |   ${squad_id_to_name(item.squad_id)}`;
        nameContainer.className = "name-container";

        // Create a container for the total points
        const pointsContainer = document.createElement('div');
        pointsContainer.textContent = `${item.stats.total_points} points`;
        pointsContainer.className = "points-container";

        // Create the remove button
        const addButton = document.createElement('button');
        addButton.textContent = "Add";
        addButton.className = "add-remove-button";
        addButton.onclick = () => addItem(manager, item.id);

        // Append the elements
        li.appendChild(nameContainer);
        li.appendChild(pointsContainer);
        li.appendChild(addButton);
        filteredList.appendChild(li);
    });
  }

  // Function to display the added items list
  function displayAddedItemsList(manager) {
      const addedItemsList = document.getElementById(`addedItemsList-${manager}`);
      addedItemsList.innerHTML = ""; // Clear the existing list
      console.log(`\n func displayAddedItemsList. addedItems = ${addedItems}`);
      manager_addedItems = addedItems[manager];
      manager_addedItems.forEach(itemId => {

      // (async () => {
        // temp = await fetch('/filter-id', {
        temp = fetch('/filter-id', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify({data: itemId})
        })
        .then(_ => _.json())
        .then(thing => {

          let item = thing.data[0];
          const li = document.createElement('li');

          // Create a container for the name
          const nameContainer = document.createElement('div');
          nameContainer.textContent = `${item.first_name} ${item.last_name}   |   ${squad_id_to_name(item.squad_id)}`;
          nameContainer.className = "name-container";

          // Create a container for the total points
          const pointsContainer = document.createElement('div');
          pointsContainer.textContent = `${item.stats.total_points} points`;
          pointsContainer.className = "points-container";

          // Create the remove button
          const removeButton = document.createElement('button');
          removeButton.textContent = "Remove";
          removeButton.className = "add-remove-button";
          removeButton.onclick = () => removeItem(manager, item.id);

          // Append the elements
          li.appendChild(nameContainer);
          li.appendChild(pointsContainer);
          li.appendChild(removeButton);
          addedItemsList.appendChild(li);

        })

      // })();
        

      });
  }

  // Function to filter the list based on the search input
function filterList(manager) {
  console.log(`In function filterList. manager = ${manager}`);
      const searchValue = document.getElementById(`searchBar-${manager}`).value.toLowerCase();

      (async () => {
        temp = await fetch('/filter', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify({data: searchValue})
        })

        thing = await temp.json();

        displayFilteredList(manager, thing.data);
        
    })();
      
  }

  // Function to add an item to the added items list
  function addItem(manager, itemId) {
      if (!addedItems[manager].includes(itemId)) {
          addedItems[manager].push(itemId);
          displayAddedItemsList(manager);

          (async () => {
            await update_record(
              {
              "single_id": 0,
              "data": addedItems
              }
            )
            console.log(`\n tried updating these items to db: ${addedItems}`);
          })();
          
      }
  }

  // Function to remove an item from the added items list
  function removeItem(manager, itemId) {
    console.log(`\n in removeItem. itemId = ${itemId}`);
    const index = addedItems[manager].indexOf(itemId);
    if (index > -1) {
        addedItems[manager].splice(index, 1); // Remove the itemId
        displayAddedItemsList(manager);

        (async () => {
          await update_record(
            {
            "single_id": 0,
            "data": addedItems
            }
          )
          // console.log(`\n tried updating these items to db: ${addedItems}`);
        })();
        
    }
  }

// Function to reset a manager's team's players
function reset(manager) {
  alert(`Will reset ${manager}'s players.\nNote that the default team might not be correct if a manager has made recent transfers.`);
  addedItems[manager] = manager_data[0]["data"][manager];
  displayAddedItemsList(manager);

  (async () => {
    await update_record(
      {
      "single_id": 0,
      "data": addedItems
      }
    )
  })();
}
  
</script>


  <script src="js/jquery.min.js"></script>
  <script src="js/bootstrap.min.js"></script>
  <script>
jQuery(document).ready(function(){

 // alert("wow");
  //  jQuery("header").addClass("fixed");
  jQuery("#hamburger").click(function(){
		//alert("The paragraph was clicked.");
		jQuery("header").toggleClass("fixed");
	});


});

// (async () => {
// })();

</script>

</body>
</html>