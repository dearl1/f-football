<!DOCTYPE html>
<html>
<head>
<title>Globomantics</title>
 <meta charset="utf-8">
 <meta http-equiv="X-UA-Compatible" content="IE=edge">
 <meta name="viewport" content="width=device-width, initial-scale=1">
 <link href="css/bootstrap.min.css" rel="stylesheet">
 <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.0/css/all.css"/>
 <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
 <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
 <link href="css/style-home.css" rel="stylesheet">
<link rel="shortcut icon" type="image/x-icon" href="images/G.png"/>

<style>
  body {
      font-family: Arial, sans-serif;
      padding: 20px;
      margin: 0;
  }
  .container {
      margin-bottom: 20px;
  }
  .filteredList {
    max-height: 150px; /* 5 items at ~30px each */
  }
  .item-list {
      list-style-type: none;
      padding: 0;
      margin: 0;
      overflow-y: auto;
      border: 1px solid #ddd;
      border-radius: 4px;
  }
  .item-list li {
      padding: 5px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #eee;
  }
  .item-list li:last-child {
      border-bottom: none;
  }
  .added-list {
      margin-top: 20px;
  }
.image-section {
    position: relative;
    background-image: url('images/hero image.png'); /* Replace with your image URL */
    background-size: cover;
    background-position: center;
    background-attachment: fixed; /* Fixes the background while text scrolls */
    padding: 20px;
    min-height: 100vh;
    color: #eee;
}
</style>
</head>

<body>
<div id="wrapper">

	<header>
	    <div class="container">
		    <div class="logo col-md-5 col-sm-5 col-xs-8">
                <a href="index.html"><img src="images/Globo-Logo-white.svg" alt="logo"/></a><span class="text">MANIACALLY TAKING TECH TO THE GLOBE</span>
			</div>
			<div class="mobile-togle col-md-12 col-sm-12 col-xs-12">
        <nav class="navbar navbar-default" role="navigation">
  <div class="navbar-header">
  <button type="button" id="hamburger" class="navbar-toggle x collapsed" data-toggle="collapse" data-target="#navbar-collapse-x">
  <span class="icon-bar"></span>
  <span class="icon-bar"></span>
  <span class="icon-bar"></span>
  </button>
  <a class="navbar-brand" href="#top"></a>
  </div>

  <div class="collapse navbar-collapse" id="navbar-collapse-x">
  <ul class="nav navbar-nav navbar-right">
  <li><div class="search1">
  			      <button type="submit"><i class="fa fa-search"></i></button> <input type="text" class="form-control" placeholder="Search">
  				</div></li>
  <ul class="navbar-nav mr-auto">
  <li class="nav-item">
          <a class="nav-link" href="our-story.html">Our story<span class="sr-only">(current)</span></a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="sessions">Sessions</a>
        </li>

        <li class="nav-item">
          <a class="nav-link disabled" href="robotics.html">Robotics</a>
        </li>

  	  <li class="nav-item">
          <a class="nav-link disabled" href="media.html">Media</a>
        </li>
  	  <li class="nav-item">
          <a class="nav-link disabled" href="#">Support</a>
        </li>
  	  </ul>
  </ul>
  </div><!-- .navbar-collapse -->
  </nav>
  			</div>

  			<div class="right_section col-md-5 col-xs-12">
  			<div class="search">
  			      <button type="submit"><i class="fa fa-search"></i></button> <input type="text" class="form-control" placeholder="Search">
  				</div>


  		<nav class="navbar navbar-expand-lg navbar-light bg-light">



    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav mr-auto">
        <li class="nav-item active">
          <a class="nav-link" href="our-story.html">Our story<span class="sr-only">(current)</span></a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="sessions">Sessions</a>
        </li>

        <li class="nav-item">
          <a class="nav-link disabled" href="robotics.html">Robotics</a>
        </li>

  	  <li class="nav-item">
          <a class="nav-link disabled" href="media.html">Media</a>
        </li>
  	  <li class="nav-item">
          <a class="nav-link disabled" href="#">Support</a>
        </li>

      </ul>

    </div>

     </nav>
     </div>

     <div class="sign-in col-md-2">
     <span class="dvider"></span>
     <div class="sign">
     <a hrf="#"><img class="sign-in-img" src="images/avatar.svg" alt="sign-in">
    Sign-in</a>

     </div>

     </div>

  		</div>
  	</header>




</div><!---------- End of Wrapper ----------->


<!-- <section class="banner"> -->
  <div class="image-section">
	<!-- <div class="inner-content col-md-12"> -->
	<div class="container jumboContainer">
    <!-- <div class="inner-content col-md-12"> -->
	<div class=" col-md-8 middle">
	   <h1>FANTASY FOOTBALL<br> <span>POINTS FOR EACH PLAYER</span>.</h1>

	   <p>v0.1</p>
    

     <div class="container">
      <input type="text" id="searchBar" style="color: black" placeholder="Search..." oninput="filterList()">
  </div>
  <ul id="filteredList" class="item-list filteredList"></ul>
  <div class="added-list">
      <h3>Added Items</h3>
      <ul id="addedItemsList" class="item-list"></ul>
  </div>

     
    <!-- </div> -->
	</div>
	   </div>
    </div>
<!-- </section> -->


<script>

  // // set up IndexedDB

  manager_data = [
    {
    "manager_key": 0,
    "player_indices": [
    202641,
    97032,
    491279
    ]
    },
    {
    "manager_key": 1,
    "player_indices": [
    232917,
    477424,
    78916
    ]
    }
  ]

  let db = null;
  dbNeedsCreating = false;

  function open_or_create_database() {

    return new Promise((resolve, reject) => {
      const request = indexedDB.open('MyTestDB');

      request.onerror = function (event) {
          console.log("Problem opening DB.");
      }

      request.onupgradeneeded = function (event) {
          db = event.target.result;

          if (!db.objectStoreNames.contains("managers")) {

            dbNeedsCreating = true;
            
            db.createObjectStore("managers", { keyPath: "manager_key" });
            console.log("created managers objectStore")        
            console.log(`open_or_create_database. dbNeedsCreating = ${dbNeedsCreating}`);

          }

      }

      request.onsuccess = function (event) {
          console.log("DB OPENED.");
          resolve(true);

      }      
    })
    

}

function delete_database() {
    const request = indexedDB.deleteDatabase('MyTestDB');

    request.onerror = function (event) {
        console.log("Problem deleting DB.");
    }

    request.onsuccess = function (event) {
        db = event.target.result;
        console.log("DB DELETED.");
    }
}

function insert_records(records) {
    if (db) {
        const insert_transaction = db.transaction("managers", "readwrite");
        const objectStore = insert_transaction.objectStore("managers");

        return new Promise((resolve, reject) => {
            insert_transaction.oncomplete = function () {
                console.log("ALL INSERT TRANSACTIONS COMPLETE.");
                resolve(true);
            }

            insert_transaction.onerror = function () {
                console.log("PROBLEM INSERTING RECORDS.")
                resolve(false);
            }

            records.forEach(item => {
                let request = objectStore.add(item);

                request.onsuccess = function () {
                    console.log("Added: ", item);
                }
            });
        });
    }
    else {
        console.log("no db")
    }
}


(async () => {
  // delete_database();
  await open_or_create_database();
  console.log(`top level. dbNeedsCreating = ${dbNeedsCreating}`);
  if (dbNeedsCreating) {
    insert_records(manager_data);
  }
})();




// // end: set up IndexedDB


  // List of added items
  const addedItems = [];

  // Function to display the list of filtered items
  function displayFilteredList(items) {

    const filteredList = document.getElementById('filteredList');
    filteredList.innerHTML = ""; // Clear the existing list
    items.forEach(item => {
        const li = document.createElement('li');
        li.textContent = item.first_name + " " + item.last_name + ", " + item.squad_id + ", " + item.stats.total_points;

        const addButton = document.createElement('button');
        addButton.textContent = "Add";
        addButton.onclick = () => addItem(item.id);

        li.appendChild(addButton);
        filteredList.appendChild(li);
    });
  }

  // Function to display the added items list
  function displayAddedItemsList() {
      const addedItemsList = document.getElementById('addedItemsList');
      addedItemsList.innerHTML = ""; // Clear the existing list
      addedItems.forEach(itemId => {

      // (async () => {
        // temp = await fetch('/filter-id', {
        temp = fetch('/filter-id', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify({data: itemId})
        })
        .then(_ => _.json())
        .then(thing => {

          item = thing.data[0];

          const li = document.createElement('li');
          li.textContent = item.first_name + " " + item.last_name + ", " + item.squad_id + ", " + item.stats.total_points;

          const removeButton = document.createElement('button');
          removeButton.textContent = "Remove";
          removeButton.onclick = () => removeItem(item.id);

          li.appendChild(removeButton);
          addedItemsList.appendChild(li);

        })

      // })();
        

      });
  }

  // Function to filter the list based on the search input
//   function filterList() {
//       const searchValue = document.getElementById('searchBar').value.toLowerCase();
//       const filteredItems = fruits.filter(player => 
//           `${player.first_name} ${player.last_name}`.toLowerCase().includes(searchValue)
//       );
//       displayFilteredList(filteredItems);
//   }
  function filterList() {
      const searchValue = document.getElementById('searchBar').value.toLowerCase();

      (async () => {
        temp = await fetch('/filter', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify({data: searchValue})
        })

        thing = await temp.json();

        displayFilteredList(thing.data);
        
    })();
      
  }

  // Function to add an item to the added items list
  function addItem(itemId) {
      if (!addedItems.includes(itemId)) {
          addedItems.push(itemId);
          displayAddedItemsList();
      }
  }

  // Function to remove an item from the added items list
  function removeItem(itemId) {
      const index = addedItems.indexOf(itemId);
      if (index > -1) {
          addedItems.splice(index, 1); // Remove the itemId
          displayAddedItemsList();
      }
  }

  // Initial display of the full list
  //   fetch('/filter', {
  //     method: 'POST',
  //     headers: {
  //         'Content-Type': 'application/json'
  //     },
  //     body: ""
  //   })
  //   .then(response => response.json())
  //   .then(data => displayFilteredList(data))

    (async () => {
        temp = await fetch('/filter', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify({data: ""})
        })

        thing = await temp.json();

        displayFilteredList(thing.data);
        
    })();

    
  

  
  
</script>


  <script src="js/jquery.min.js"></script>
  <script src="js/bootstrap.min.js"></script>
  <script>
jQuery(document).ready(function(){

 // alert("wow");
  //  jQuery("header").addClass("fixed");
  jQuery("#hamburger").click(function(){
		//alert("The paragraph was clicked.");
		jQuery("header").toggleClass("fixed");
	});


});


</script>

</body>
</html>
